{"version":3,"sources":["utils/pixiJs.ts","hooks/useTilesetsLoader.ts","Map/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["loadResource","path","callback","loader","PIXI","shared","resources","add","load","_","useTilesetsLoader","determineTilesetSpritesheetPath","useState","tilesetsTextures","setTilesets","data","setData","useEffect","nextIndex","Object","keys","length","tilesetData","tilesetName","name","resource","error","console","newTilesets","textures","loadComplete","loadTilesets","value","Map","props","jsonPath","mapData","setMapData","process","tilesets","log","tileLocationToPosition","location","x","TILE_WIDTH","y","renderLayerTiles","tileData","map","gid","i","tileset","findTileset","tiles","columns","width","Math","floor","texture","find","t","id","firstgid","image","split","spritesheet","textureName","warn","key","anchor","pivot","position","height","TILE_HEIGHT","options","backgroundColor","className","layers","layer","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8e341c4d.chunk.js","sourcesContent":["import { LoaderResource } from 'pixi.js';\nimport * as PIXI from 'pixi.js';\n\ninterface Location {\n    x: number;\n    y: number;\n}\n\nexport const lerpLocation = (point1: Location, point2: Location, alpha: number): Location => {\n    const x = lerp(point1.x, point2.x, alpha);\n    const y = lerp(point1.y, point2.y, alpha);\n    return { x, y };\n}\n\nconst lerp = (n1: number,  n2: number,  alpha: number) =>  {\n    return n1 + alpha * (n2 - n1);\n}\n\n// Uses the shared pixi loader to load a resource\nexport async function loadResourceAsync(path: string) { \n    const loader = PIXI.Loader.shared;\n    return new Promise<LoaderResource>((resolve, reject) => {\n        if (loader.resources[path]) {\n            resolve(loader.resources[path]);\n        }\n        else {\n            loader.add(path).load((_, resources) => {\n                resolve(resources[path]);\n            });\n        }\n    });\n}\n\nexport const loadResource = (path: string, callback: (resource: LoaderResource) => void) => { \n    const loader = PIXI.Loader.shared;\n    if (loader.resources[path]) {\n        callback(loader.resources[path]);\n        return;\n    }\n    loader.add(path).load((_, resources) => { callback(resources[path]!)});\n}","import { useState, useEffect } from \"react\";\nimport { TiledTilesetData } from \"../utils/tiledMapData\";\nimport { loadResource } from \"../utils/pixiJs\";\n\nconst useTilesetsLoader = (determineTilesetSpritesheetPath: (tileset: TiledTilesetData) => string) => {\n    const [tilesetsTextures, setTilesets] = useState<{[key: string]: PIXI.ITextureDictionary}>({});\n    const [data, setData] = useState<TiledTilesetData[]>();\n    // const [loadComplete, setLoadComplete] = useState(false);\n\n    const loadTilesets = (value: TiledTilesetData[]) => {\n        setData(value);\n    };\n\n    useEffect(() => {\n        if (!data) return;\n        const nextIndex = Object.keys(tilesetsTextures).length;\n        const tilesetData = data[nextIndex];\n        if (!tilesetData) return;\n\n        const tilesetName = tilesetData.name;\n        const path = determineTilesetSpritesheetPath(tilesetData);\n        loadResource(`${path}`, (resource) => {\n            if (resource.error) {\n                console.error(resource.error);\n            }\n            const newTilesets = { \n                ...tilesetsTextures,\n                [tilesetName]: resource.textures!\n            }\n            setTilesets(newTilesets);\n        });\n    }, [data, determineTilesetSpritesheetPath, tilesetsTextures]);\n    \n    // useEffect(() => {\n    //     if (!data) return;\n    //     console.log(data.length)\n    //     console.log(Object.keys(tilesetsTextures).length)\n    //     if (data.length === Object.keys(tilesetsTextures).length){\n    //         setLoadComplete(true);\n    //     }\n    \n    // }, [tilesetsTextures, data])\n\n    const loadComplete = !!data && data.length === Object.keys(tilesetsTextures).length;\n\n    return {\n        loadComplete,\n        loadTilesets,\n        tilesetsTextures\n    }\n}\n\nexport default useTilesetsLoader;","import React, { useEffect, useState } from 'react';\nimport { loadResource } from '../utils/pixiJs';\nimport { Stage, Sprite, Container } from '@inlet/react-pixi';\nimport { TiledMapData, TiledTilesetData, TiledLayerData } from '../utils/tiledMapData';\nimport { SpritesheetData, SpriteData } from '../utils/spritesheetData';\nimport * as PIXI from 'pixi.js';\nimport useTilesetsLoader from '../hooks/useTilesetsLoader';\n\nconst TILE_WIDTH = 128;\nconst TILE_HEIGHT = 64;\ninterface Props { \n    jsonPath: string\n}\n\n// // This stuff is needed for the pixi-js browser plugin\nif (process.env.NODE_ENV === \"development\") {\n  // @ts-ignore\n  // tslint:disable-next-line: no-unused-expression\n  window.__PIXI_INSPECTOR_GLOBAL_HOOK__ && window.__PIXI_INSPECTOR_GLOBAL_HOOK__.register({ PIXI });\n}\n\n\nconst Map = (props: Props) => {\n  const {jsonPath} = props;\n  const [mapData, setMapData] = useState<TiledMapData>();\n  const mapWidth = TILE_WIDTH * 6;\n  const mapHeight = TILE_HEIGHT * 6;\n\n  const {\n    loadComplete,\n    loadTilesets,\n    tilesetsTextures\n  } = useTilesetsLoader(determineTilesetSpritesheetPath);\n\n  useEffect(() => {\n    loadResource(`${process.env.PUBLIC_URL}/${jsonPath}`, (resource) => {\n      setMapData(resource.data);\n    });\n  }, [jsonPath]);\n\n  useEffect(() => {\n    if (mapData) {\n      loadTilesets(mapData.tilesets);\n    }\n  }, [loadTilesets, mapData]);\n\n  console.log(`loadcomplete: ${loadComplete}`);\n\n  const tileLocationToPosition = (location: [number, number]) => {\n    const x = (location[0] - location[1]) * TILE_WIDTH / 2 + (TILE_WIDTH * 6 / 2);\n    const y = (location[0] + location[1]) * TILE_HEIGHT / 2 + (TILE_HEIGHT);\n    return new PIXI.Point(x, y);\n  }\n\n  if (!loadComplete) {\n    return (\n      <div>Loading...</div>\n    )\n  }\n  const textures = tilesetsTextures[\"structure-floor\"];\n  \n  const renderLayers = (layers: TiledLayerData[]) => {\n    return layers.map((layer: TiledLayerData) => {\n      return (\n        <Container key={layer.name} name={layer.name}>\n          {renderLayerTiles(layer.data)}\n        </Container>\n      )  \n    });\n  } \n\n  const renderLayerTiles = (tileData: number[]) => {\n    return tileData.map((gid, i) => {\n      const tileset = findTileset(gid, mapData!.tilesets);\n      if (!tileset || !tileset.tiles) return null;\n\n      const columns = mapData!.width;\n      const x = (i % columns);\n      const y = Math.floor(i / columns);\n      const texture = tileset.tiles.find((t) => t.id === gid - tileset.firstgid);\n      if (!texture) return null;\n\n      // the image is in the format \"tiles/structure-wall/tile-structure-wall-gray-left.png\"\n      // the 'structure-wall' part refers to the spritesheet, the 'tile-structure-wall-gray-left' is the texture on the spriesheet\n      const [\n        _,\n        spritesheet,\n        textureName\n      ] = texture.image.split(\"/\");\n      if (!tilesetsTextures[spritesheet]) {\n        console.warn(`Could not find spritesheet ${spritesheet} ${tilesetsTextures}`);\n      };\n      if (!tilesetsTextures[spritesheet][textureName]) {\n        console.warn(`Could not find texture ${spritesheet} ${textureName}`);\n      }\n      return (\n          <Sprite\n            key={i}\n            name={`${x},${y}`}\n            texture={tilesetsTextures[spritesheet][textureName]}\n            anchor={[0, 1]}\n            pivot={[64, 0]}\n            position={tileLocationToPosition([x, y])}\n          /> \n      );  \n    })\n  }\n\n  return (\n    <Stage width={mapWidth} height={mapHeight} options={{backgroundColor: 0x0}} className=\"background\">\n      {textures && (\n        renderLayers(mapData!.layers)\n      )}\n    </Stage>\n  );\n}\n\nexport default Map;\n\n// returns the path to the spritesheet for given tileset\nconst determineTilesetSpritesheetPath = (tilesetData: TiledTilesetData) => `${process.env.PUBLIC_URL}maps/tilesets/${tilesetData.name}.json`;\n\nconst findTileset = (gid: number, tilesets: TiledTilesetData[]) => {\n  let tileset;\n  for (let i = tilesets.length - 1; i >= 0; i--) {\n    tileset = tilesets[i];\n    if (tileset.firstgid <= gid) {\n      break;\n    }\n  }\n  return tileset;\n}\n\nconst parseSpritesheetData = (mapData: TiledMapData): SpritesheetData => {\n  const tileset = mapData.tilesets[0];\n  const columns = tileset.columns;\n\n  const frames: { [name: string]: SpriteData } = {};\n  for (let i = 0; i < tileset.tilecount; i++) {\n      const w = tileset.tilewidth;\n      const h = tileset.tileheight;\n      const x = (i % columns) * w;\n      const y = Math.floor(i / columns) * h;\n\n      frames[`${tileset.name}-${i + tileset.firstgid}`] = { \n          frame: {x, y, w, h},\n          spriteSourceSize: {x, y, w, h},\n          rotated: false,\n          trimmed: false,\n          sourceSize: { w, h}\n      };\n  }\n  const image = tileset.image;\n  const size = { w: tileset.imagewidth, h: tileset.imageheight };\n  return {\n      frames,\n      meta: {\n          image,\n          size,\n          scale: 1\n      }\n  };\n}\n\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { Stage, Sprite } from '@inlet/react-pixi';\nimport { loadResource } from './utils/pixiJs';\nimport { TiledMapData } from './utils/tiledMapData';\nimport { SpritesheetData, SpriteData } from './utils/spritesheetData';\nimport * as PIXI from 'pixi.js';\nimport Map from \"./Map\";\n\nconst TILE_WIDTH = 128;\nconst TILE_HEIGHT = 64;\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <Map jsonPath={`${process.env.PUBLIC_URL}maps/testmap1.json`} />\n        {/* <Stage width={mapWidth} height={mapHeight} options={{backgroundColor: 0x0}} className=\"background\">\n            {textures && (\n              <>\n                <Sprite\n                  texture={textures[\"tile-structure-floor-blackwhite.png\"]}\n                  anchor={[.5, 1]}\n                  width={TILE_WIDTH}\n                  height={TILE_HEIGHT}\n                  position={tileLocationToPosition([0, 0])}\n                /> \n                <Sprite\n                  texture={textures[\"tile-structure-floor-blackwhite.png\"]}\n                  anchor={[.5, 1]}\n                  width={TILE_WIDTH}\n                  height={TILE_HEIGHT}\n                  position={tileLocationToPosition([1, 0])}\n                />\n                <Sprite\n                  texture={textures[\"tile-structure-floor-blackwhite.png\"]}\n                  anchor={[.5, 1]}\n                  width={TILE_WIDTH}\n                  height={TILE_HEIGHT}\n                  position={tileLocationToPosition([2, 0])}\n                />\n                <Sprite\n                  texture={textures[\"tile-structure-floor-blackwhite.png\"]}\n                  anchor={[.5, 1]}\n                  width={TILE_WIDTH}\n                  height={TILE_HEIGHT}\n                  position={tileLocationToPosition([3, 0])}\n                />\n                <Sprite\n                  texture={textures[\"tile-structure-floor-dadada.png\"]}\n                  anchor={[.5, 1]}\n                  width={TILE_WIDTH}\n                  height={TILE_HEIGHT}\n                  position={tileLocationToPosition([4, 0])}\n                />\n                <Sprite\n                  texture={textures[\"tile-structure-floor-blackwhite.png\"]}\n                  anchor={[.5, 1]}\n                  width={TILE_WIDTH}\n                  height={TILE_HEIGHT}\n                  position={tileLocationToPosition([5, 0])}\n                />\n                <Sprite\n                  texture={textures[\"tile-structure-floor-dadada.png\"]}\n                  anchor={[.5, 1]}\n                  width={TILE_WIDTH}\n                  height={TILE_HEIGHT}\n                  position={tileLocationToPosition([0, 1])}\n                />\n                <Sprite\n                  texture={textures[\"tile-structure-floor-wood.png\"]}\n                  anchor={[.5, 1]}\n                  width={TILE_WIDTH}\n                  height={TILE_HEIGHT}\n                  position={tileLocationToPosition([1, 1])}\n                />\n                <Sprite\n                  texture={textures[\"tile-structure-floor-blackwhite.png\"]}\n                  anchor={[.5, 1]}\n                  width={TILE_WIDTH}\n                  height={TILE_HEIGHT}\n                  position={tileLocationToPosition([2, 1])}\n                />\n                <Sprite\n                  texture={textures[\"tile-structure-floor-grass.png\"]}\n                  anchor={[.5, 1]}\n                  width={TILE_WIDTH}\n                  height={TILE_HEIGHT}\n                  position={tileLocationToPosition([3, 1])}\n                />\n                <Sprite\n                  texture={textures[\"tile-structure-floor-grass.png\"]}\n                  anchor={[.5, 1]}\n                  width={TILE_WIDTH}\n                  height={TILE_HEIGHT}\n                  position={tileLocationToPosition([4, 1])}\n                />\n                <Sprite\n                  texture={textures[\"tile-structure-floor-grass.png\"]}\n                  anchor={[.5, 1]}\n                  width={TILE_WIDTH}\n                  height={TILE_HEIGHT}\n                  position={tileLocationToPosition([5, 1])}\n                />\n                <Sprite\n                  texture={textures[\"tile-structure-floor-grass.png\"]}\n                  anchor={[.5, 1]}\n                  width={TILE_WIDTH}\n                  height={TILE_HEIGHT}\n                  position={tileLocationToPosition([0, 2])}\n                />\n                <Sprite\n                  texture={textures[\"tile-structure-floor-grass.png\"]}\n                  anchor={[.5, 1]}\n                  width={TILE_WIDTH}\n                  height={TILE_HEIGHT}\n                  position={tileLocationToPosition([1, 2])}\n                />\n                <Sprite\n                  texture={textures[\"tile-structure-floor-grass.png\"]}\n                  anchor={[.5, 1]}\n                  width={TILE_WIDTH}\n                  height={TILE_HEIGHT}\n                  position={tileLocationToPosition([2, 2])}\n                />\n                <Sprite\n                  texture={textures[\"tile-structure-floor-grass.png\"]}\n                  anchor={[.5, 1]}\n                  width={TILE_WIDTH}\n                  height={TILE_HEIGHT}\n                  position={tileLocationToPosition([3, 2])}\n                />\n                <Sprite\n                  texture={textures[\"tile-structure-floor-grass.png\"]}\n                  anchor={[.5, 1]}\n                  width={TILE_WIDTH}\n                  height={TILE_HEIGHT}\n                  position={tileLocationToPosition([4, 2])}\n                />\n                <Sprite\n                  texture={textures[\"tile-structure-floor-grass.png\"]}\n                  anchor={[.5, 1]}\n                  width={TILE_WIDTH}\n                  height={TILE_HEIGHT}\n                  position={tileLocationToPosition([5, 2])}\n                />\n              </> \n            )}\n\n        </Stage> */}\n        </div>\n  );\n}\n\nexport default App;\n\nconst parseSpritesheetData = (mapData: TiledMapData): SpritesheetData => {\n  const tileset = mapData.tilesets[0];\n  const columns = tileset.columns;\n\n  const frames: { [name: string]: SpriteData } = {};\n  for (let i = 0; i < tileset.tilecount; i++) {\n      const w = tileset.tilewidth;\n      const h = tileset.tileheight;\n      const x = (i % columns) * w;\n      const y = Math.floor(i / columns) * h;\n\n      frames[`${tileset.name}-${i + tileset.firstgid}`] = { \n          frame: {x, y, w, h},\n          spriteSourceSize: {x, y, w, h},\n          rotated: false,\n          trimmed: false,\n          sourceSize: { w, h}\n      };\n  }\n  const image = tileset.image;\n  const size = { w: tileset.imagewidth, h: tileset.imageheight };\n  return {\n      frames,\n      meta: {\n          image,\n          size,\n          scale: 1\n      }\n  };\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["utils/pixiJs.ts","utils/tiledMapData.ts","hooks/useTilesetsLoader.ts","components/pixi/Viewport.tsx","utils/isometric.ts","constants/tiles.ts","components/pixi/FloorTileLayer.tsx","components/pixi/ParticleEmitter.ts","components/pixi/effects/smoke1/index.tsx","components/Map/index.tsx","components/Modal/index.tsx","components/playerBridge/style/close.svg","components/playerBridge/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TiledLayerType","Orientation","RenderOrder","loadResource","path","callback","loader","PIXI","shared","resources","add","load","_","useTilesetsLoader","determineTilesetSpritesheetPath","useState","tilesetsTextures","setTilesets","data","setData","useEffect","nextTileset","nextTilesetToload","tilesetName","name","resource","error","Error","newTilesets","loadComplete","undefined","loadTilesets","value","tilesets","find","t","Viewport","forwardRef","props","ref","app","useApp","window","PixiComponentViewport","PixiComponent","create","viewport","PixiViewport","screenWidth","screenHeight","worldWidth","worldHeight","ticker","on","event","onClick","minScale","maxScale","drag","pinch","wheel","clamp","direction","setZoom","clampZoom","decelerate","tileLocationToPosition","location","horizontalTiles","verticalTiles","x","getOriginX","TILE_WIDTH","y","require","FloorTileLayer","tilemap","CompositeRectTileLayer","texture","applyProps","instance","oldProps","layer","tileset","spritesheet","i","Math","floor","position","tile","tiles","id","firstgid","tileName","image","substr","lastIndexOf","addFrame","textures","length","ParticleEmitter","newProps","config","newP","applyDefaultProps","emitter","this","_emitter","particles","from","elapsed","performance","now","emit","tick","raf","requestAnimationFrame","update","willUnmount","cancelAnimationFrame","Smoke1","process","smoke","pivot","innerWidth","innerHeight","Map","jsonPath","onSituationClick","mapData","setMapData","ROUND_PIXELS","SCALE_MODE","SCALE_MODES","NEAREST","mapWidth","width","height","mapHeight","viewportRef","useRef","current","moveCenter","renderLayerTiles","tileData","layerIndex","map","gid","actualGid","findTileset","columns","flipVert","scale","split","textureName","console","warn","key","anchor","zIndex","renderObjects","objects","o","index","polygon","points","reduce","acc","push","type","draw","graphics","beginFill","drawPolygon","endFill","TILE_HEIGHT","pointerdown","interactive","renderEffects","properties","offset","p","options","sharedLoader","backgroundColor","parseBackgroundColor","backgroundcolor","className","firstTileGid","getTiles","Boolean","clearTextureCache","_texture","renderFloor","layers","l","sortableChildren","filter","visible","tilelayer","objectgroup","renderObjectLayers","tilesetData","asString","parseInt","substring","rawData","encoding","compression","Modal","onClose","situation","handleClose","isOpen","ariaHideApp","portalClassName","overlayClassName","onRequestClose","title","src","url","_extends","Object","assign","target","arguments","source","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","_ref3","_ref4","cx","cy","r","_ref5","d","transform","_ref6","_ref7","_ref8","x1","y1","x2","y2","_ref9","_ref","svgRef","viewBox","ForwardRef","PlayerBridge","gameDataReceived","send","payload","webkit","stringifiedMessageObj","JSON","stringify","messageHandlers","cordova_iab","postMessage","parent","REACT_APP_PLAYER_MODE","setGameData","gameData","GAMEDATA","getGameData","addEventListener","msg","App","currentMap","setCurrentMap","setSituation","content","setContent","mapJson","onChange","e","currentTarget","situations","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7faf0ca8.chunk.js","sourcesContent":["import { LoaderResource } from 'pixi.js';\nimport * as PIXI from 'pixi.js';\n\ninterface Location {\n    x: number;\n    y: number;\n}\n\nexport const lerpLocation = (point1: Location, point2: Location, alpha: number): Location => {\n    const x = lerp(point1.x, point2.x, alpha);\n    const y = lerp(point1.y, point2.y, alpha);\n    return { x, y };\n}\n\nconst lerp = (n1: number,  n2: number,  alpha: number) =>  {\n    return n1 + alpha * (n2 - n1);\n}\n\n// Uses the shared pixi loader to load a resource\nexport async function loadResourceAsync(path: string) { \n    const loader = PIXI.Loader.shared;\n    return new Promise<LoaderResource>((resolve, reject) => {\n        if (loader.resources[path]) {\n            resolve(loader.resources[path]);\n        }\n        else {\n            loader.add(path).load((_, resources) => {\n                resolve(resources[path]);\n            });\n        }\n    });\n}\n\nexport const loadResource = (path: string, callback: (resource: LoaderResource) => void) => { \n    const loader = PIXI.Loader.shared;\n    if (loader.resources[path]) {\n        callback(loader.resources[path]);\n        return;\n    }\n    loader.add(path).load((_, resources) => { callback(resources[path]!)});\n}","export interface TiledMapData {\n    width: number;\n    height: number;\n    tilewidth: number;\n    tileheight: number;\n    infinite: boolean;\n    backgroundcolor?: string;\n    orientation: Orientation;\n    renderorder: RenderOrder;\n    tilesets: TiledTilesetData[];\n    layers: TiledLayerData[];\n}\n\nexport interface TiledTilesetData {\n    columns: number;\n    firstgid: number;\n    source: string;\n    image: string;\n    imagewidth: number;\n    imageheight: number;\n    tilewidth: number;\n    tileheight: number;\n    tilecount: number;\n    name: string;\n    margin: number; // todo:\n    spacing: number; // todo\n    tiles?: TileData[];\n}\n\nexport interface TileData {\n    id: number,\n    image: string;\n    properties?: TiledProperty[];\n}\n\nexport interface TiledLayerData {\n    data: number[] | string;\n    objects: TiledObjectData[];\n    type: TiledLayerType;\n    height: number;\n    id: number;\n    name: string;\n    opacity: number; // not supported atm\n    visible: boolean;\n    x: number;\n    y: number;\n    width: number;\n    properties?: TiledProperty[];\n    encoding?: 'base64';\n    compression?: '' | 'gzip' | 'zstd';\n}\n\nexport interface TiledObjectData {\n    gid?: number;\n    id: number;\n    name: string;\n    properties?: TiledProperty[];\n    polygon?: { x: number, y: number}[];\n    type: string;\n    visible: boolean;\n    width: number;\n    height: number;\n    x: number;\n    y: number;\n}\n\nexport enum TiledLayerType {\n    tilelayer = \"tilelayer\",\n    objectgroup = \"objectgroup\"\n}\n\nexport interface TiledProperty {\n    name: string,\n    type: string,\n    value: any\n}\n\nenum Orientation {\n    orthagonal = \"orthagonal\",\n    isometric = \"isometric\",\n    staggered = \"staggered\",\n    hexagonal = \"hexagonal\"\n}\n\nenum RenderOrder {\n    rightUp = \"right-up\",\n    rightDown = \"right-down\",\n    leftUp = \"left-up\",\n    leftDown = \"left-down\"\n}","import { useState, useEffect } from \"react\";\nimport { TiledTilesetData } from \"utils/tiledMapData\";\nimport { loadResource } from \"utils/pixiJs\";\nimport { LoaderResource } from \"pixi.js\";\n\nconst useTilesetsLoader = (determineTilesetSpritesheetPath: (tileset: TiledTilesetData) => string) => {\n    const [tilesetsTextures, setTilesets] = useState<{[key: string]: LoaderResource}>({});\n    const [data, setData] = useState<TiledTilesetData[]>();\n\n    const loadTilesets = (value: TiledTilesetData[]) => {\n        setData(value);\n    };\n\n    useEffect(() => {\n        if (!data) return;\n        //console.log('loading tilesets', data)\n        const nextTileset = nextTilesetToload(data, tilesetsTextures);\n        if (!nextTileset) return;\n\n        const tilesetName = nextTileset.name;\n        const path = determineTilesetSpritesheetPath(nextTileset);\n        loadResource(`${path}`, (resource) => {\n            if (resource.error) {\n                throw new Error(`Loading ${path}\\n${resource.error}`);\n            }\n            const newTilesets = { \n                ...tilesetsTextures,\n                [tilesetName]: resource\n            }\n            setTilesets(newTilesets);\n        });\n    }, [data, determineTilesetSpritesheetPath, tilesetsTextures]);\n    \n    const loadComplete = !!data && nextTilesetToload(data, tilesetsTextures) === undefined;\n\n    return {\n        loadComplete,\n        loadTilesets,\n        tilesetsTextures\n    }\n}\n\nexport default useTilesetsLoader;\n\n// Returns a TiledTilesetData that has not been loaded into tilesetsTextures yet\nconst nextTilesetToload = (tilesets: TiledTilesetData[], tilesetsTextures: {[key: string]: LoaderResource}) => {\n    return tilesets.find((t) => {\n        return !tilesetsTextures[t.name];\n    })\n}","import React, { forwardRef } from \"react\";\nimport { Viewport as PixiViewport, ClickEventData } from \"pixi-viewport\";\nimport { PixiComponent, useApp } from \"@inlet/react-pixi\";\nimport * as PIXI  from 'pixi.js';\n\ninterface Props {\n  onClick?(event: ClickEventData): void;\n  screenWidth: number,\n  screenHeight: number,\n  worldWidth: number,\n  worldHeight: number,\n  minScale?: number;\n  maxScale?: number;\n}\n\n/** Viewport leverages pixi-viewport to create a pannable map\n * https://davidfig.github.io/pixi-viewport/jsdoc/\n */\nconst Viewport = forwardRef<PixiViewport, any>((props, ref) => {\n  const app = useApp();\n  window.PIXI = PIXI;\n\n  return <PixiComponentViewport app={app} {...props} ref={ref} />;\n})\n\ninterface PixiComponentProps {\n    app: PIXI.Application;\n}\n\nconst PixiComponentViewport = PixiComponent(\"Viewport\", {\n  create: (props: PixiComponentProps & Props) => {\n    const viewport = new PixiViewport({\n      screenWidth: props.screenWidth,\n      screenHeight: props.screenHeight,\n      worldWidth: props.worldWidth,\n      worldHeight: props.worldHeight,\n      ticker: props.app.ticker,\n      //interaction: props.app.renderer.plugins.interaction,\n      // the interaction module is important for wheel to work properly when renderer.view is placed or scaled\n    });\n    viewport.on(\"clicked\", (event) => { if(props.onClick) props.onClick(event) });\n\n    const {\n      minScale = .3,\n      maxScale = 1\n    } = props;\n\n    viewport\n      .drag()\n      .pinch()\n      .wheel()\n      .clamp({ direction: 'all' })\n      .setZoom(.4)\n      .clampZoom({ minScale, maxScale })\n      .decelerate();\n\n    return viewport;\n  }\n});\nexport default Viewport;\n","import * as PIXI from 'pixi.js';\nimport { TILE_WIDTH, TILE_HEIGHT, MARGIN_TOP } from \"constants/tiles\";\n\nexport const tileLocationToPosition = (location: [number, number], horizontalTiles: number, verticalTiles: number) => {\n  const x = getOriginX(horizontalTiles, verticalTiles) + (TILE_WIDTH / 2) * location[0] + (TILE_WIDTH / 2) * -location[1];\n  const y = (location[0] + location[1]) * TILE_HEIGHT / 2 + (TILE_HEIGHT) + MARGIN_TOP;\n  return new PIXI.Point(x, y);\n}\n\nexport const getOriginX = (horizontalTiles: number, verticalTiles: number) => {\n  return (verticalTiles - horizontalTiles) * (TILE_HEIGHT / 2) + ((verticalTiles + horizontalTiles) * TILE_WIDTH / 2) / 2;\n}","export const TILE_WIDTH = 128;\nexport const TILE_HEIGHT = 64;\nexport const MARGIN_TOP = 128;   // extra top margin around the map\n","import { PixiComponent } from \"@inlet/react-pixi\";\nimport * as PIXI  from 'pixi.js';\nimport { TiledLayerData, TiledTilesetData } from \"utils/tiledMapData\";\nimport { tileLocationToPosition } from \"utils/isometric\";\nimport { TILE_HEIGHT, TILE_WIDTH } from \"constants/tiles\";\nwindow.PIXI = PIXI;\nrequire('pixi-tilemap');\n\ninterface Props  {\n  texture: PIXI.Texture;\n  verticalTiles: number;\n  horizontalTiles: number;\n  layer: TiledLayerData;\n  tileset: TiledTilesetData;\n  spritesheet: PIXI.Spritesheet;\n};\n\n// Floortile layer leverages pixi-tilemap for better performance\nconst FloorTileLayer = PixiComponent<Props, any>(\"FloorTileLayer\", {\n  create(props: Props) {\n\n    // @ts-ignore\n    const tileLayer = new window.PIXI.tilemap.CompositeRectTileLayer(0, [props.texture]);\n    return tileLayer;\n  },\n\n  applyProps(instance, oldProps: Props, props: Props) {\n    const {layer, tileset, verticalTiles, horizontalTiles, spritesheet } = props;\n    if (!layer.data) {\n      return;\n    }\n    for (let i = 0; i < layer.data.length; i++) {\n      if (layer.data[i] > 0) {\n        const location: [number, number] = [i % horizontalTiles, Math.floor(i / horizontalTiles)];\n        const position = tileLocationToPosition(location, horizontalTiles, verticalTiles);\n\n        // @ts-ignore\n        const tile = tileset.tiles!.find((t) => t.id === layer.data[i] - tileset.firstgid);\n        const tileName = tile?.image.substr(tile?.image.lastIndexOf('/') + 1);\n        \n        instance.addFrame(spritesheet.textures[tileName!], \n          position.x - TILE_WIDTH / 2, \n          position.y - TILE_HEIGHT);\n      }\n    }\n  }\n});\n\nexport default FloorTileLayer;\n\n","import { PixiComponent, applyDefaultProps, Container } from \"@inlet/react-pixi\";\nimport * as PIXI  from 'pixi.js';\nimport * as particles from 'pixi-particles';\n\ninterface Props  {\n    image: string;\n    config: particles.OldEmitterConfig | particles.EmitterConfig;\n};\n\nconst ParticleEmitter = PixiComponent<Props & React.ComponentProps<typeof Container>, PIXI.ParticleContainer>(\"ParticleEmitter\", {\n    create() {\n      return new PIXI.ParticleContainer();\n    },\n\n    applyProps(instance, oldProps: Props, newProps: Props) {\n      const { image, config, ...newP } = newProps;\n\n      // apply rest props to PIXI.ParticleContainer\n      applyDefaultProps(instance, oldProps, newP);\n\n      let emitter = (this as any)._emitter;\n      if (!emitter) {\n        emitter = new particles.Emitter(\n          instance,\n          [PIXI.Texture.from(image)],\n          config\n        );\n\n        let elapsed = performance.now();\n\n        const tick = () => {\n          emitter.raf = requestAnimationFrame(tick);\n          const now = performance.now();\n          // const amp = Math.random() * 5 + 15;\n          // const amp = 15;\n          // const freq = 0.0015;\n          // emitter.acceleration.x = (Math.sin((elapsed * freq)) * amp) + 15;\n\n          emitter.update((now - elapsed) * 0.0003);\n\n          elapsed = now;\n        };\n        emitter.emit = true;\n        // emitter.update(00.2);\n\n        tick();\n      }\n      (this as any)._emitter = emitter;\n    },\n\n    willUnmount() {\n      if ((this as any)._emitter) {\n        (this as any)._emitter.emit = false;\n        cancelAnimationFrame((this as any)._emitter.raf);\n      }\n    }\n});\n\nexport default ParticleEmitter;","import React from \"react\";\nimport smoke from './smoke.json';\nimport ParticleEmitter from 'components/pixi/ParticleEmitter';\nimport { TILE_WIDTH } from \"constants/tiles\";\nimport { Container } from \"@inlet/react-pixi\";\n\n\nconst Smoke1 = (props: React.ComponentProps<typeof Container> ) => {\n    const { x = 0, y = 0 } = props;\n    return (\n        <ParticleEmitter\n            name=\"smoke\"\n            x={x}\n            y={y}\n            image={`${process.env.PUBLIC_URL}/effects/smokeparticle.png`}\n            config={smoke}\n            pivot={[-TILE_WIDTH / 2, 0]}\n        />\n    )\n}\nexport default Smoke1;","import React, { useEffect, useState, useRef } from 'react';\nimport { loadResource } from 'utils/pixiJs';\nimport { Stage, Sprite, Container, Graphics } from '@inlet/react-pixi';\nimport { TiledMapData, TiledTilesetData, TiledLayerData, TiledLayerType, TiledObjectData, TiledProperty } from 'utils/tiledMapData';\nimport * as PIXI from 'pixi.js';\nimport useTilesetsLoader from 'hooks/useTilesetsLoader';\nimport Viewport from '../pixi/Viewport';\nimport { SCALE_MODES } from 'pixi.js';\nimport { Viewport as PixiViewport } from \"pixi-viewport\";\nimport { TILE_HEIGHT, TILE_WIDTH, MARGIN_TOP} from 'constants/tiles';\nimport { tileLocationToPosition } from 'utils/isometric';\nimport FloorTileLayer from 'components/pixi/FloorTileLayer';\nimport Smoke1 from 'components/pixi/effects/smoke1';\n\nconst screenWidth = window.innerWidth;\nconst screenHeight = window.innerHeight;\n\ninterface Props { \n  jsonPath: string;\n  onSituationClick: (situation: string) => void;\n}\n\n// // This stuff is needed for the pixi-js browser plugin\nif (process.env.NODE_ENV === \"development\") {\n  // @ts-ignore\n  // tslint:disable-next-line: no-unused-expression\n  window.__PIXI_INSPECTOR_GLOBAL_HOOK__ && window.__PIXI_INSPECTOR_GLOBAL_HOOK__.register({ PIXI });\n}\n\n\nconst Map = (props: Props) => {\n  const {jsonPath, onSituationClick} = props;\n  const [mapData, setMapData] = useState<TiledMapData>();\n  PIXI.settings.ROUND_PIXELS = true;\n\n  const {\n    loadComplete,\n    loadTilesets,\n    tilesetsTextures\n  } = useTilesetsLoader(determineTilesetSpritesheetPath);\n\n  useEffect(() => {\n    PIXI.settings.SCALE_MODE = SCALE_MODES.NEAREST; // prevent lines on the edges of tiles\n    loadResource(`${process.env.PUBLIC_URL}/${jsonPath}`, (resource) => {\n      setMapData(resource.data);\n    });\n  }, [jsonPath]);\n\n  useEffect(() => {\n    // console.log('mapdata changed', mapData)\n    if (mapData) {\n      loadTilesets(mapData.tilesets);\n    }\n  }, [loadTilesets, mapData]);\n\n  // https://stackoverflow.com/questions/4615116/how-to-calculate-the-height-and-width-of-an-isometric-rectangle-square\n  const mapWidth = ((mapData?.width || 1) + (mapData?.height || 1)) * (TILE_WIDTH / 2);\n  const mapHeight = ((mapData?.width || 1) + (mapData?.height || 1)) * (TILE_HEIGHT / 2) + MARGIN_TOP;\n\n  const viewportRef = useRef<PixiViewport>(null);\n  useEffect(() => {\n    // focus on center of the map\n    if (viewportRef.current) {\n        const viewport = viewportRef.current;\n        viewport.moveCenter(mapWidth / 2, mapHeight / 2);\n    }\n  }, [mapData, mapHeight, mapWidth, tilesetsTextures]);\n\n\n  if (!loadComplete || !mapData) {\n    return (\n      <div>Loading...</div>\n    )\n  }\n\n  const renderFloor = (layer?: TiledLayerData) => {\n    if (!layer) {\n      console.warn(\"No layer with name 'floor' found!\");\n      return null;\n    }\n    const data = getTiles(layer);\n    const firstTileGid = data.find(Boolean);\n    if (!firstTileGid) {\n      console.warn(\"Layer with name 'floor' is empty?\");\n      return null;\n    }\n    const actualGid = firstTileGid & 0x1FFFFFFF;\n    const tileset = findTileset(actualGid, mapData!.tilesets);\n    if (!tileset) {\n      console.warn(\"No tileset found for floor layer. Huh?\");\n      return null;\n    }\n    const resource = tilesetsTextures[tileset.name];\n    PIXI.utils.clearTextureCache();\n\n    if (!resource.spritesheet) {\n      console.warn(`No texture loaded found for floor layer. Was looking for ${tileset.name}`);\n      return null;\n    }\n    return (\n      <FloorTileLayer \n        texture={(resource.spritesheet as any)._texture}\n        verticalTiles={mapData.height}\n        horizontalTiles={mapData.width}\n        layer={layer}\n        tileset={tileset}\n        spritesheet={resource.spritesheet}\n      />\n    )\n  }\n\n  const renderLayers = (layers: TiledLayerData[]) => {\n    return layers.filter(l => l.visible && l.name !== \"floor\" && l.type === TiledLayerType.tilelayer)\n      .map((layer: TiledLayerData, index: number) => {\n      const data = getTiles(layer);\n      return renderLayerTiles(data, layer, index)\n        // </Container>\n    });\n  } \n\n  const renderLayerTiles = (tileData: number[], layer: TiledLayerData, layerIndex: number) => {\n    return tileData.map((gid, i) => {\n      const actualGid = gid & 0x1FFFFFFF;\n      const tileset = findTileset(actualGid, mapData!.tilesets);\n      if (!tileset || !tileset.tiles || gid === 0) return null;\n\n      const columns = mapData!.width;\n      const x = (i % columns);\n      const y = Math.floor(i / columns);\n      // See https://discourse.mapeditor.org/t/data-field-in-the-tmx-format-json/3633\n      const flipHor = (gid & 0x80000000) !== 0;\n      const flipVert = (gid & 0x40000000) !== 0;\n      // const flipDiag = (gid & 0x20000000) !== 0;\n      const scale: [number, number] = [1, 1];\n      if (flipHor) {\n        scale[0] *= -1;\n      }\n      if (flipVert) {\n        scale[1] *= -1;\n      }\n      const texture = tileset.tiles.find((t) => t.id === actualGid - tileset.firstgid);\n      if (!texture) return null;\n\n      // the image is in the format \"tiles/structure-wall/tile-structure-wall-gray-left.png\"\n      // the 'structure-wall' part refers to the spritesheet, the 'tile-structure-wall-gray-left' is the texture on the spriesheet\n      const [\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        _,\n        spritesheet,\n        textureName\n      ] = texture.image.split(\"/\");\n      if (!tilesetsTextures[spritesheet]) {\n        console.warn(`Could not find spritesheet ${spritesheet} ${tilesetsTextures}`);\n      };\n      if (!tilesetsTextures[spritesheet].textures![textureName]) {\n        console.warn(`Could not find texture ${spritesheet} ${textureName}`);\n      }\n\n      return (\n          <Sprite\n            key={i}\n            name={`${layer.name}: ${x},${y} (${textureName})`}\n            scale={scale}\n            texture={tilesetsTextures[spritesheet].textures![textureName]}\n            anchor={[0, 1]}\n            pivot={[TILE_WIDTH / 2, 0]}\n            position={tileLocationToPosition([x, y], mapData.width, mapData.height)}\n            zIndex={i * 100 + layerIndex}\n          /> \n      );  \n    })\n  }\n\n  const renderObjectLayers = (layers: TiledLayerData[]) => {\n\n    return layers.filter(l => l.visible && l.type === TiledLayerType.objectgroup)\n      .map((layer: TiledLayerData, index: number) => {\n        return renderObjects(layer.objects);\n    });\n  } \n\n  const renderObjects = (objects: TiledObjectData[]) => {\n    return objects.map((o, index) => {\n      if (o.polygon) {\n        const {x, y } = o;\n        const location: [number, number] = [\n          x / TILE_HEIGHT,\n          y / TILE_HEIGHT\n        ];\n \n        const points = o.polygon.reduce((acc: number[], value: { x: number, y: number} ) => {\n          acc.push(value.y + value.x)\n          acc.push((value.y / 2) - (value.x / 2));\n          return acc;\n        }, []);\n\n        return (\n          <Graphics\n            key={`${o.type}${o.name}${index}`}\n            draw={graphics => {\n              graphics.beginFill(0xBADA55);\n              graphics.drawPolygon(points);\n              graphics.endFill();\n            }}\n            position={tileLocationToPosition(location, mapData.width, mapData.height)}\n            pivot={[TILE_WIDTH / 2, TILE_HEIGHT /2]}\n          />\n        )\n      }\n      else if (o.gid) {\n        // todo: DRY\n        const {x, y, gid } = o;\n        const location: [number, number] = [\n          x / TILE_HEIGHT - 1,\n          y / TILE_HEIGHT - 1\n        ];\n        const actualGid = gid & 0x1FFFFFFF;\n        const tileset = findTileset(actualGid, mapData!.tilesets);\n        if (!tileset || !tileset.tiles || gid === 0) return null;\n          \n        // See https://discourse.mapeditor.org/t/data-field-in-the-tmx-format-json/3633\n        const flipHor = (gid & 0x80000000) !== 0;\n        const flipVert = (gid & 0x40000000) !== 0;\n        // const flipDiag = (gid & 0x20000000) !== 0;\n        const scale: [number, number] = [1, 1];\n        if (flipHor) {\n          scale[0] *= -1;\n        }\n        if (flipVert) {\n          scale[1] *= -1;\n        }\n        const texture = tileset.tiles.find((t) => t.id === actualGid - tileset.firstgid);\n        if (!texture) return null;\n  \n        // the image is in the format \"tiles/structure-wall/tile-structure-wall-gray-left.png\"\n        // the 'structure-wall' part refers to the spritesheet, the 'tile-structure-wall-gray-left' is the texture on the spriesheet\n        const [\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          _,\n          spritesheet,\n          textureName\n        ] = texture.image.split(\"/\");\n        if (!tilesetsTextures[spritesheet]) {\n          console.warn(`Could not find spritesheet ${spritesheet} ${tilesetsTextures}`);\n        };\n        if (!tilesetsTextures[spritesheet].textures![textureName]) {\n          console.warn(`Could not find texture ${spritesheet} ${textureName}`);\n        }\n  \n        return (\n            <Sprite\n              key={`${o.type}${o.name}${index}`}\n              name={`${o.name}: ${x},${y} (${textureName})`}\n              scale={scale}\n              texture={tilesetsTextures[spritesheet].textures![textureName]}\n              anchor={[0, 1]}\n              pivot={[TILE_WIDTH / 2, 0]}\n              position={tileLocationToPosition(location, mapData.width, mapData.height)}\n              pointerdown={() => onSituationClick(o.name)}\n              interactive={!!o.name}\n            >\n              {renderEffects(o.properties)}\n            </Sprite> \n        );  \n      }\n      return null;\n    })\n  }\n\n  const renderEffects = (properties?: TiledProperty[]) => {\n    if (!properties) return null;\n    let x, y;\n    const offset = properties.find(p => p.name === 'offset');\n    if (offset) {\n      [x, y] = offset.value.split(',');\n    }\n\n    // return (\n    //   <Graphics\n    //       name=\"selectioncircle\"\n    //       draw={graphics => {\n    //           const line = 3;\n    //           graphics.lineStyle(line, 0xBADA55);\n    //           graphics.drawCircle(0, 0, 5);\n    //           graphics.endFill();\n    //       }}\n    //       pivot={[-TILE_WIDTH / 2, 0]}\n    //       position={[0, 0]}\n\n    //   />\n    // )\n    return (\n      <Smoke1 \n        x={x}\n        y={y}\n      />\n    )\n  }\n\n  const options = { \n    sharedLoader: true,\n    backgroundColor: parseBackgroundColor(mapData?.backgroundcolor)\n  }\n\n  return (\n    <Stage width={screenWidth} height={screenHeight} className=\"background\" options={options}>\n      <Viewport\n        worldWidth={mapWidth}\n        worldHeight={mapHeight}\n        screenWidth={screenWidth}\n        screenHeight={screenHeight}\n        ref={viewportRef}\n      >\n        {renderFloor(mapData.layers.find(l => l.name === \"floor\"))}\n        {/* <Graphics\n            name=\"selectioncircle\"\n            draw={graphics => {\n                const line = 3;\n                graphics.lineStyle(line, 0xFFFFFF);\n                graphics.drawCircle(0, 0, 5);\n                graphics.endFill();\n            }}\n            position={tileLocationToPosition([0, 0], mapData.width, mapData.height)}\n\n        /> */}\n        <Container sortableChildren={true}>\n          {renderLayers(mapData.layers)}\n        </Container>\n        {renderObjectLayers(mapData.layers)}\n      </Viewport>\n    </Stage>\n  );\n}\n\nexport default Map;\n// returns the path to the spritesheet for given tileset\nconst determineTilesetSpritesheetPath = (tilesetData: TiledTilesetData) => `${process.env.PUBLIC_URL}/maps/tilesets/${tilesetData.name}.json`;\n\n// finds tileset based on gid\nconst findTileset = (gid: number, tilesets: TiledTilesetData[]) => {\n  let tileset;\n  for (let i = tilesets.length - 1; i >= 0; i--) {\n    tileset = tilesets[i];\n    if (tileset.firstgid <= gid) {\n      break;\n    }\n  }\n  return tileset;\n}\n\nconst parseBackgroundColor = (asString: string | undefined) : number | undefined => {\n  if (!asString) { return; }\n  return parseInt(asString.substring(1), 16); // strip the hash, conver to int\n}\n\nconst getTiles = (layer: TiledLayerData): number[] => {\n\n    let data = null;\n    let rawData = layer.data;\n\n    if (typeof(rawData) !== 'string') {\n      // return new Uint8Array(rawData);\n      return rawData;\n    }\n\n    // ==================================\n    // == If applicable, decode Base64 ==\n    // ==================================\n    if(layer.encoding === 'base64') {\n        // data = base64.decode(rawData);\n        // data = base64.decode(\"dGVzdA==\");\n    }\n\n    // ============================================\n    // == If applicable, extract compressed data ==\n    // ============================================\n    if(layer.compression === 'gzip') {\n    //    data = zlib.gunzipSync(data);\n    }\n\n    // ====================================\n    // == Read buffer data every 4 bytes ==\n    // ====================================\n\n    // Each 32-bit integer is placed in an 8-bit integer array.\n    // There will never be a tile ID greater than 255, so only 1 byte is required.\n    // let array = new Uint8Array(layer.width * layer.height);\n    // for(let i=0, index=0; i<data.length; i += 4, index++) {\n    //     array[index] = data.readUInt32LE(i);\n    //     index++;\n    // }\n    // return array;\n    return [];\n}","import React from 'react';\nimport ReactModal from 'react-modal';\nimport './styles/modal.css';\nimport { Situation } from 'data/Content';\n\n\ninterface Props {\n  situation: Situation;\n  onClose: () => void;\n}\n\nconst Modal = (props: Props) => {\n  const { onClose, situation} = props;\n\n  const handleClose = () => {\n    onClose();\n  };\n\n\n  return (\n    <ReactModal\n      isOpen={true}\n      ariaHideApp={false}\n      portalClassName=\"modal-portal\"\n      overlayClassName=\"modal-overlay\"\n      className=\"modal\"\n      onRequestClose={handleClose}\n    >\n      <>\n        <div className=\"header\">\n          <h1>{situation.title} </h1>\n          <div className=\"modal-close\" onClick={() => handleClose()}></div>\n        </div>\n        {/* <iframe src=\"https://21cceducation.nl/content/webgl_portfolio/games/ConveyorGame/\"></iframe> */}\n        <iframe src={situation.url} title=\"game\"></iframe>\n      </>\n    </ReactModal>  \n  )\n}\n\nexport default Modal;\n\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"style\", null, \".a{fill:#fff;}.a,.b{stroke:#283583;stroke-linecap:round;stroke-linejoin:round;stroke-width:0.75px;}.b{fill:none;}\"));\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"title\", null, \"Back\");\n\nvar _ref4 = /*#__PURE__*/React.createElement(\"circle\", {\n  className: \"a\",\n  cx: 15.02,\n  cy: 15.02,\n  r: 14.65\n});\n\nvar _ref5 = /*#__PURE__*/React.createElement(\"path\", {\n  className: \"b\",\n  d: \"M11.64,16\",\n  transform: \"translate(-0.97 -0.93)\"\n});\n\nvar _ref6 = /*#__PURE__*/React.createElement(\"path\", {\n  className: \"b\",\n  d: \"M11.63,16\",\n  transform: \"translate(-0.97 -0.93)\"\n});\n\nvar _ref7 = /*#__PURE__*/React.createElement(\"path\", {\n  className: \"b\",\n  d: \"M20.38,22.88\",\n  transform: \"translate(-0.97 -0.93)\"\n});\n\nvar _ref8 = /*#__PURE__*/React.createElement(\"line\", {\n  className: \"b\",\n  x1: 19.39,\n  y1: 8.16,\n  x2: 10.65,\n  y2: 15.02\n});\n\nvar _ref9 = /*#__PURE__*/React.createElement(\"line\", {\n  className: \"b\",\n  x1: 19.39,\n  y1: 21.98,\n  x2: 10.65,\n  y2: 15.11\n});\n\nvar SvgClose = function SvgClose(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 30.04,\n    height: 30.04,\n    viewBox: \"0 0 30.04 30.04\",\n    ref: svgRef\n  }, props), _ref2, title === undefined ? _ref3 : title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgClose, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/close.7ec0d58f.svg\";\nexport { ForwardRef as ReactComponent };","import React, {  useEffect } from 'react';\nimport './style/styles.css';\nimport { ReactComponent as CloseIcon } from './style/close.svg';\n\ninterface Props {\n    gameDataReceived: (gameData: any) => void;\n}\n\n// start w  REACT_APP_PLAYER_MODE=true npm start\n\nconst PlayerBridge = (props: Props) => {   \n    const {gameDataReceived} = props;\n\n    const send = (payload: any) => {\n        // @ts-ignore\n        if (window.hasOwnProperty(\"webkit\") && window.webkit.hasOwnProperty(\"messageHandlers\")){\n            var stringifiedMessageObj = JSON.stringify(payload);\n            // Send to In App Browser context\n            // @ts-ignore\n            webkit.messageHandlers.cordova_iab.postMessage(stringifiedMessageObj);\n        }\n        else {\n            // @ts-ignore\n            window.parent.postMessage(payload, '*');\n        }\n    }\n\n    const exit = () => {       \n        send({\n            type: 'exit'\n        });\n    }\n\n    useEffect(() => {\n        if (!process.env.REACT_APP_PLAYER_MODE) {\n            return;\n        }\n        const receiveMessage = (msg: any) => {\n            if (!msg.data.hasOwnProperty('userId')){\n                return;\n            }\n            // @ts-ignore\n            window.GAMEDATA = msg.data;\n            gameDataReceived(msg.data);\n        }\n\n        // @ts-ignore\n        window.setGameData = (gameData) => {\n            send({\n                type: 'setGameData',\n                data: gameData\n            });\n        }\n       \n        // @ts-ignore\n        window.GAMEDATA = null; \n        \n        // @ts-ignore\n        window.getGameData = () => {\n            // @ts-ignore\n            return window.GAMEDATA;\n        }   \n        window.addEventListener(\"message\", receiveMessage, false);\n    }, [gameDataReceived]);\n\n    if (!process.env.REACT_APP_PLAYER_MODE) {\n        return null;\n    }\n\n\n    return (\n        <div className=\"close\">\n            <CloseIcon onClick={exit} />\n        </div>\n    )\n}\n\nexport default PlayerBridge;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Map from \"./components/Map\";\nimport Modal from 'components/Modal';\nimport PlayerBridge from 'components/playerBridge';\nimport { GameData } from 'components/playerBridge/GameData';\nimport { Content, Situation } from 'data/Content';\n\n\nfunction App() {\n  const [currentMap, setCurrentMap] = useState<string>();\n  const [situation, setSituation] = useState<Situation>();\n  const [content, setContent] = useState<Content>();\n\n  const handleClose = () => {\n    setSituation(undefined);\n  }\n\n  const handleGameDataReceived = (data: GameData<Content>) => {\n    //setContent(data.content);\n    setCurrentMap(data.content.mapJson);\n    setContent(data.content);\n  }\n\n  useEffect(() => {\n    //setTimeout(handleOpen, 5000);\n  }, []);\n   \n  const handleSituationClick = (situation: string) => {\n    setSituation(content!.situations[situation]);\n  }\n\n\n  return (\n    <div className=\"App\" >\n      <PlayerBridge gameDataReceived={handleGameDataReceived}/>\n      <select value={currentMap} onChange={e => setCurrentMap(e.currentTarget.value)}>\n        <option>maps/testmap1.json</option>\n        <option>maps/testmap2.json</option>\n        <option>maps/testmap3.json</option>\n        <option>maps/testmap4.json</option>\n      </select>\n      {situation && <Modal onClose={handleClose} situation={situation}/>  }\n      {currentMap && <Map jsonPath={currentMap} onSituationClick={handleSituationClick} /> }\n    </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}